package org.drooms.strategy.tomason.priority

import org.slf4j.Logger
import java.util.ArrayList
import java.util.Random

import org.drooms.strategy.tomason.components.collectibles.*
import org.drooms.strategy.tomason.components.collision.*;
import org.drooms.strategy.tomason.components.history.*
import org.drooms.strategy.tomason.components.status.*
import org.drooms.strategy.tomason.components.*

import org.drooms.api.*
import org.drooms.impl.logic.*
import org.drooms.impl.logic.facts.*
import org.drooms.impl.logic.events.*

import org.drools.runtime.rule.FactHandle
import org.drools.runtime.rule.WorkingMemoryEntryPoint

global Logger logger
global PathTracker tracker

declare entry-point gameEvents end
declare entry-point rewardEvents end
declare entry-point playerEvents end


rule "Insert default moves into WM with default priority"
    salience 10000
    when
        Status($x : position.x, $y : position.y)
    then
        insertLogical(new PriorityMove(Node.getNode($x - 1, $y), Move.LEFT, 0));
        insertLogical(new PriorityMove(Node.getNode($x + 1, $y), Move.RIGHT, 0));
        insertLogical(new PriorityMove(Node.getNode($x, $y + 1), Move.UP, 0));
        insertLogical(new PriorityMove(Node.getNode($x, $y - 1), Move.DOWN, 0));
        insertLogical(new PriorityMove(Node.getNode($x, $y), Move.STAY, -100));
end

rule "Insert top priority"
    salience -10
    when
        accumulate(PriorityMove($priority : priority), $topPriority : max($priority))
    then
        insertLogical($topPriority);
end

rule "Choose a top priority move to execute"
    salience -100
    when
        Number($topPriority : longValue)
        $moves : ArrayList($size : size, size > 0) from collect (PriorityMove(priority >= $topPriority))
        CurrentTurn($turn : number)
    then
        Random random = new Random(System.nanoTime());
        Move move = ((PriorityMove)$moves.get(random.nextInt($size))).getMove();
        insert(new PastMove($turn, move));
        channels["decision"].send(move);
end
