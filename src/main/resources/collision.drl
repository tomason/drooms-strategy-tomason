package org.drooms.strategy.tomason.collision

import org.slf4j.Logger

import org.drooms.strategy.tomason.components.collectibles.*
import org.drooms.strategy.tomason.components.collision.*;
import org.drooms.strategy.tomason.components.history.*
import org.drooms.strategy.tomason.components.status.*
import org.drooms.strategy.tomason.components.*

import org.drooms.api.*
import org.drooms.impl.logic.*
import org.drooms.impl.logic.facts.*
import org.drooms.impl.logic.events.*

global Logger logger


rule "Insert wall obstacles"
    salience 100
    when
        Wall( $node : node )
    then
        insert(new Obstacle($node));
end

rule "Insert enemy obstacles"
    salience 100
    when
        Enemy( $worm : worm )
    then
        java.util.Iterator<Node> $it = $worm.iterator();
        for (int i = 1; $it.hasNext(); i++) {
            insertLogical(new Obstacle($it.next(), i));
        }
end

rule "Insert my worm obstacles"
	salience 100
	when
		Status( $snake : snake )
	then
		java.util.Iterator<Node> $it = $snake.iterator();
		for (int i = 1; $it.hasNext(); i++) {
			insertLogical(new MyWorm($it.next(), i));
		}
end



rule "insert theoretical move for free places LEFT from head"
    salience -5
    when
        Status( $x : x, $y : y, $length : length )
        not Positioned( x == $x - 1, y == $y )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x - 1, $y), Move.LEFT, $length));
end

rule "insert theoretical move for free places RIGHT from head"
    salience -5
    when
        Status( $x : x, $y : y, $length : length )
        not Positioned( x == $x + 1, y == $y )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x + 1, $y), Move.RIGHT, $length));
end

rule "insert theoretical move for free places UP from head"
    salience -5
    when
        Status( $x : x, $y : y, $length : length )
        not Positioned( x == $x, y == $y + 1 )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x, $y + 1), Move.UP, $length));
end

rule "insert theoretical move for free places DOWN from head"
    salience -5
    when
        Status( $x : x, $y : y, $length : length )
        not Positioned( x == $x, y == $y - 1 )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x, $y - 1), Move.DOWN, $length));
end

rule "insert theoretical move for STAY"
    salience -5
    when
        GameProperty( name == GameProperty.Name.MAX_INACTIVE_TURNS, $maxInactive : value )
        Status( $stay : stayCount < $maxInactive, $node : position, $length : length )
    then
        insertLogical(new TheoreticalMove($node, $stay, $length));
end


rule "insert theoretical move for free places LEFT from theoretical move"
    salience (-$limit - 10)
    when
        $prev : TheoreticalMove(limit > 0, moves not contains Node.getNode(x - 1, y), $x : x, $y : y, $limit : length, $turns : turns)
        not Obstacle( x == $x - 1, y == $y, expires < $limit )
        not MyWorm( x == $x - 1, y == $y, expires < $turns )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x - 1, $y), $prev));
end

rule "insert theoretical move for free places RIGHT from theoretical move"
    salience (-$limit - 10)
    when
        $prev : TheoreticalMove(limit > 0, moves not contains Node.getNode(x + 1, y), $x : x, $y : y, $limit : length, $turns : turns)
        not Obstacle( x == $x + 1, y == $y, expires < $limit )
        not MyWorm( x == $x + 1, y == $y, expires < $turns )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x + 1, $y), $prev));
end

rule "insert theoretical move for free places UP from theoretical move"
    salience (-$limit - 10)
    when
        $prev : TheoreticalMove(limit > 0, moves not contains Node.getNode(x, y + 1), $x : x, $y : y, $limit : length, $turns : turns)
        not Obstacle( x == $x, y == $y + 1, expires < $limit )
        not MyWorm( x == $x, y == $y + 1, expires < $turns )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x, $y + 1), $prev));
end

rule "insert theoretical move for free places DOWN from theoretical move"
    salience (-$limit - 10)
    when
        $prev : TheoreticalMove(limit > 0, moves not contains Node.getNode(x, y - 1), $x : x, $y : y, $limit : length, $turns : turns)
        not Obstacle( x == $x, y == $y - 1, expires < $limit )
        not MyWorm( x == $x, y == $y - 1, expires < $turns )
    then
        insertLogical(new TheoreticalMove(Node.getNode($x, $y - 1), $prev));
end

rule "insert theoretical STAY move"
    salience (-$limit - 10)
    when
        GameProperty( name == GameProperty.Name.MAX_INACTIVE_TURNS, $maxInactive : value )
        $prev : TheoreticalMove( limit > 0, stayCount < $maxInactive, $limit : limit )
    then
        insertLogical(new TheoreticalMove($prev));
end


declare DesiredWay
	move : Move
	turn : int
end

rule "Insert desired way"
	when
		TheoreticalMove( limit == 0, $dir : move )
		CurrentTurn( $turn : number )
	then
		insert(new DesiredWay($dir, $turn));
end

declare BackupWay
	move : Move
	turn : int
end

rule "Insert backup way if no path was chosen"
	salience -10000
	when
		CurrentTurn( $turn : number )
		not DesiredWay( turn == $turn )
		Number( $minLimit : intValue ) from accumulate ( TheoreticalMove( $limit : limit ), min( $limit ) )
		TheoreticalMove( limit == $minLimit, $move : move )
	then
		insertLogical(new BackupWay($move, $turn));
end

rule "Increase priority to desirable ways"
    when
    	CurrentTurn( $turn : number  )
        DesiredWay( $dir : move, turn == $turn )
        $move : PriorityMove( move == $dir )
    then
        modify($move) {
            addPriority(500000);
        }
end

rule "Increase priority to backup ways"
	salience -10000
    when
    	CurrentTurn( $turn : number  )
        BackupWay( $dir : move, turn == $turn )
        $move : PriorityMove( move == $dir )
    then
        modify($move) {
            addPriority(50000);
        }
end

rule "Remove all theoretical moves for desired way"
	salience -1
	when
		CurrentTurn( $turn : number )
		DesiredWay( $dir : move, turn == $turn )
		$move : TheoreticalMove( move == $dir )
	then
		retract($move);
end

rule "Force STAY if no path is available"
    salience -30
    when
    	CurrentTurn( $turn : number )
        not DesiredWay( turn == $turn )
        Status( $pos : position )
    then
        insertLogical(new PriorityMove($pos, Move.STAY, Integer.MAX_VALUE));
end

