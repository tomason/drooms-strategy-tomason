package org.drooms.strategy.tomason.status

import org.slf4j.Logger
import java.util.ArrayList
import java.util.Random

import org.drooms.strategy.tomason.components.collectibles.*
import org.drooms.strategy.tomason.components.collision.*;
import org.drooms.strategy.tomason.components.history.*
import org.drooms.strategy.tomason.components.status.*
import org.drooms.strategy.tomason.components.*

import org.drooms.api.*
import org.drooms.impl.logic.*
import org.drooms.impl.logic.facts.*
import org.drooms.impl.logic.events.*

import org.drools.runtime.rule.FactHandle
import org.drools.runtime.rule.WorkingMemoryEntryPoint

global Logger logger
global PathTracker tracker

declare entry-point gameEvents end
declare entry-point rewardEvents end
declare entry-point playerEvents end


rule "Insert current position fact if it is not available"
    salience Integer.MAX_VALUE
    when
        not Status()
    then
        insert(new Status());
end

rule "Update current position"
    salience Integer.MAX_VALUE
    no-loop
    when
        CurrentPlayer($p : player)
        PlayerMoveEvent(player == $p, $nodes : nodes, $dir : move) from entry-point playerEvents
        $pos : Status()
    then
        $pos.setSnake($nodes);
        $pos.setDirection($dir);
        update($pos);
end

rule "Insert enemies"
    salience 100
    when
        CurrentPlayer($p : player)
        PlayerMoveEvent(player != $p, $player : player, $worm : nodes) from entry-point playerEvents
        not Enemy(player == $player)
    then
        insert(new Enemy($player, $worm));
end

rule "Update enemies"
    salience 100
    when
        $event : PlayerMoveEvent($worm : nodes, $player : player) from entry-point playerEvents
        $e : Enemy(player == $player)
    then
        modify($e) {
            setWorm($worm);
        }
        WorkingMemoryEntryPoint point = drools.getEntryPoint("playerEvents");
        FactHandle handle = point.getFactHandle($event);
        point.retract(handle);
end

rule "Remove dead enemies"
    salience 99
    when
        PlayerDeathEvent($player : player) from entry-point playerEvents
        $e : Enemy(player == $player)
    then
        retract($e);
end
